# Generated by Django 2.2.6 on 2019-11-28 06:18

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('club', '0004_auto_20191127_1449'),
    ]

    operations = [
        migrations.AlterField(
            model_name='event',
            name='description',
            field=models.CharField(help_text='Long descriptionf of the event. Supports Markdown.', max_length=5000),
        ),
        migrations.AlterField(
            model_name='event',
            name='end',
            field=models.DateTimeField(help_text='The exact end date and time of the event.'),
        ),
        migrations.AlterField(
            model_name='event',
            name='event_type',
            field=models.CharField(choices=[('IS', 'Info Session'), ('WS', 'Workshop'), ('SJ', 'Study Jam Workshop'), ('HO', 'Hands-on Workshop'), ('HA', 'Hackathon'), ('SS', 'Speaker Session'), ('SC', 'Showcase'), ('CT', 'Core Team Meeting')], help_text='Whether the event is a Workshop, Info session, etc.', max_length=2),
        ),
        migrations.AlterField(
            model_name='event',
            name='presentation_link',
            field=models.URLField(blank=True, help_text='An optional link to presentation slides for the event. Most likely Google Slides.', null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='start',
            field=models.DateTimeField(help_text='The exact start date and time of the event.'),
        ),
        migrations.AlterField(
            model_name='event',
            name='tagline',
            field=models.CharField(blank=True, help_text='An optional tagline that will be displayed with the event title if it exists.', max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='title',
            field=models.CharField(help_text='The headline title of the event. Should be very concise.', max_length=100),
        ),
        migrations.AlterField(
            model_name='event',
            name='visibility',
            field=models.CharField(choices=[('P', 'Public'), ('M', 'Members'), ('C', 'Core Team')], help_text='Determines who can see/register for the event.', max_length=1),
        ),
        migrations.AlterField(
            model_name='project',
            name='description',
            field=models.CharField(help_text='Long description of the project.', max_length=3000),
        ),
        migrations.AlterField(
            model_name='project',
            name='repository_link',
            field=models.URLField(help_text='Link to where the code can be found. Most likely GitHub.'),
        ),
        migrations.AlterField(
            model_name='project',
            name='title',
            field=models.CharField(help_text='Required title for project.', max_length=200),
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
